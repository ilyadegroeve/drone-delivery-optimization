import math



vaccines_hospitals = {
    "Hôpital Etterbeek-Ixelles": 30,
    "Clinique Saint-Jean": 20,
    "Cliniques de l'Europe": 50,
    "Edith Cavell": 40,
    "Hôpitaux iris Ziekenhuizen": 40,
    "Epsylon ASBL": 20,
    "VUB": 0,
}

real_coordinates = {
    "VUB": (50.8222329, 4.3969074),
    "Edith Cavell": (50.8139343, 4.3578839),
    "Cliniques de l'Europe": (50.8050334, 4.3686235),
    "Epsylon ASBL": (50.7861456, 4.3666663),
    "Hôpital Etterbeek-Ixelles": (50.8252055, 4.3787444),
    "Clinique Saint-Jean": (50.8543172, 4.3603786),
    "Hôpitaux iris Ziekenhuizen": (50.8334341, 4.3559617),
}



def calculate_distance(coord1, coord2):
    """Calculate the Haversine distance between two GPS coordinates."""
    lat1, lon1 = math.radians(coord1[0]), math.radians(coord1[1])
    lat2, lon2 = math.radians(coord2[0]), math.radians(coord2[1])
    
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    r = 6371  
    return c * r

flight_route = ['VUB', 'Hôpital Etterbeek-Ixelles', 'Clinique Saint-Jean', 'Hôpitaux iris Ziekenhuizen', 'Edith Cavell', "Cliniques de l'Europe", 'Epsylon ASBL', 'VUB']
# vaccines_current = {0: 15.228590918780641, 1: 15.286587655510552, 2: 15.34458439224046, 3: 15.402581128970366, 4: 15.460577865700277, 5: 15.518574602430185, 6: 15.576571339160095, 7: 15.63456807589, 8: 15.69256481261991, 9: 15.750561549349817, 10: 15.808558286079725, 11: 15.866555022809635, 12: 15.92455175953954, 13: 15.98254849626945, 14: 16.04054523299936, 15: 16.09854196972927, 16: 16.156538706459173, 17: 16.214535443189085, 18: 16.272532179918993, 19: 16.330528916648902, 20: 16.388525653378807, 21: 16.44652239010872, 22: 16.504519126838627, 23: 16.56251586356853, 24: 16.620512600298444, 25: 16.67850933702835, 26: 16.73650607375826, 27: 16.79450281048817, 28: 16.852499547218077, 29: 16.91049628394798, 30: 16.96849302067789, 31: 17.026489757407802, 32: 17.084486494137707, 33: 17.142483230867615, 34: 17.200479967597527, 35: 17.258476704327435, 36: 17.31647344105734, 37: 17.374470177787252, 38: 17.43246691451716, 39: 17.49046365124707, 40: 17.548460387976974, 41: 17.606457124706886, 42: 17.66445386143679, 43: 17.722450598166702, 44: 17.78044733489661, 45: 17.838444071626515, 46: 17.896440808356424, 47: 17.954437545086336, 48: 18.012434281816244, 49: 18.07043101854615, 50: 18.128427755276057, 51: 18.18642449200597, 52: 18.244421228735877, 53: 18.302417965465782, 54: 18.36041470219569, 55: 18.4184114389256, 56: 18.476408175655507, 57: 18.53440491238542, 58: 18.592401649115327, 59: 18.650398385845232, 60: 18.70839512257514, 61: 18.766391859305052, 62: 18.82438859603496, 63: 18.8827802970608, 64: 18.950380155261385, 65: 19.017980013461965, 66: 19.085579871662556, 67: 19.153179729863137, 68: 19.22077958806372, 69: 19.2883794462643, 70: 19.355979304464885, 71: 19.42357916266547, 72: 19.49117902086605, 73: 19.558778879066633, 74: 19.626378737267213, 75: 19.693978595467804, 76: 19.761578453668385, 77: 19.82917831186897, 78: 19.89677817006955, 79: 19.96437802827014, 80: 20.03197788647072, 81: 20.099577744671304, 82: 20.167177602871885, 83: 20.234777461072472, 84: 20.302377319273052, 85: 20.369977177473636, 86: 20.437577035674217, 87: 20.5051768938748, 88: 20.572776752075388, 89: 20.640376610275972, 90: 20.707976468476552, 91: 20.775576326677132, 92: 20.843176184877724, 93: 20.910776043078304, 94: 20.978375901278888, 95: 21.045975759479468, 96: 21.113575617680056, 97: 21.181175475880636, 98: 21.248775334081223, 99: 21.316375192281804, 100: 21.383975050482384, 101: 21.45157490868297, 102: 21.519174766883555, 103: 21.586774625084136, 104: 21.654374483284716, 105: 21.721974341485307, 106: 21.78957419968589, 107: 21.85717405788647, 108: 21.92477391608705, 109: 21.99237377428764, 110: 22.05997363248822, 111: 22.127573490688807, 112: 22.195173348889387, 113: 22.26277320708997, 114: 22.330373065290555, 115: 22.39797292349114, 116: 22.46557278169172, 117: 22.5331726398923, 118: 22.60077249809289, 119: 22.668372356293474, 120: 22.735972214494055, 121: 22.803572072694635, 122: 22.87117193089522, 123: 22.93877178909581, 124: 23.00637164729639, 125: 23.07397150549697, 126: 23.141571363697555, 127: 23.20917122189814, 128: 23.276771080098722, 129: 23.344370938299306, 130: 23.411970796499887, 131: 23.47957065470047, 132: 23.547170512901058, 133: 23.61477037110164, 134: 23.68237022930222, 135: 23.749970087502803, 136: 23.817569945703394, 137: 23.885169803903974, 138: 23.952769662104554, 139: 24.020369520305138, 140: 24.087969378505726, 141: 24.155569236706306, 142: 24.223169094906886, 143: 24.295410992376535, 144: 24.36919181703679, 145: 24.442972641697054, 146: 24.516753466357308, 147: 24.59053429101757, 148: 24.664315115677823, 149: 24.738095940338088, 150: 24.811876764998345, 151: 24.8856575896586, 152: 24.95943841431886, 153: 25.033219238979125, 154: 25.10700006363938, 155: 25.180780888299633, 156: 25.254561712959894, 157: 25.32834253762016, 158: 25.402123362280413, 159: 25.47590418694067, 160: 25.54968501160093, 161: 25.623465836261182, 162: 25.69724666092145, 163: 25.771027485581705, 164: 25.844808310241962, 165: 25.91858913490222, 166: 25.992369959562485, 167: 26.06615078422274, 168: 26.139931608882993, 169: 26.213712433543254, 170: 26.287493258203515, 171: 26.361274082863773, 172: 26.43505490752403, 173: 26.508835732184288, 174: 26.58261655684455, 175: 26.65639738150481, 176: 26.730178206165064, 177: 26.803959030825325, 178: 26.877739855485583, 179: 26.95152068014584, 180: 27.025301504806098, 181: 27.099082329466356, 182: 27.172863154126613, 183: 27.246643978786874, 184: 27.320424803447132, 185: 27.39420562810739, 186: 27.467986452767647, 187: 27.54176727742791, 188: 27.615548102088162, 189: 27.689328926748423, 190: 27.763109751408685, 191: 27.836890576068942, 192: 27.9106714007292, 193: 27.984452225389457, 194: 28.05823305004972, 195: 28.13201387470998, 196: 28.20547269064748, 197: 28.275153549529602, 198: 28.344834408411728, 199: 28.414515267293854, 200: 28.48419612617598}
vaccines_current = {0: 15.23, 1: 15.29, 2: 15.34, 3: 15.4, 4: 15.46, 5: 15.52, 6: 15.58, 7: 15.63, 8: 15.69, 9: 15.75, 10: 15.81, 11: 15.87, 12: 15.92, 13: 15.98, 14: 16.04, 15: 16.1, 16: 16.16, 17: 16.21, 18: 16.27, 19: 16.33, 20: 16.39, 21: 16.45, 22: 16.5, 23: 16.56, 24: 16.62, 25: 16.68, 26: 16.74, 27: 16.79, 28: 16.85, 29: 16.91, 30: 16.97, 31: 17.03, 32: 17.08, 33: 17.14, 34: 17.2, 35: 17.26, 36: 17.32, 37: 17.37, 38: 17.43, 39: 17.49, 40: 17.55, 41: 17.61, 42: 17.66, 43: 17.72, 44: 17.78, 45: 17.84, 46: 17.9, 47: 17.95, 48: 18.01, 49: 18.07, 50: 18.13, 51: 18.19, 52: 18.24, 53: 18.3, 54: 18.36, 55: 18.42, 56: 18.48, 57: 18.53, 58: 18.59, 59: 18.65, 60: 18.71, 61: 18.77, 62: 18.82, 63: 18.88, 64: 18.95, 65: 19.02, 66: 19.09, 67: 19.15, 68: 19.22, 69: 19.29, 70: 19.36, 71: 19.42, 72: 19.49, 73: 19.56, 74: 19.63, 75: 19.69, 76: 19.76, 77: 19.83, 78: 19.9, 79: 19.96, 80: 20.03, 81: 20.1, 82: 20.17, 83: 20.23, 84: 20.3, 85: 20.37, 86: 20.44, 87: 20.51, 88: 20.57, 89: 20.64, 90: 20.71, 91: 20.78, 92: 20.84, 93: 20.91, 94: 20.98, 95: 21.05, 96: 21.11, 97: 21.18, 98: 21.25, 99: 21.32, 100: 21.38, 101: 21.45, 102: 21.52, 103: 21.59, 104: 21.65, 105: 21.72, 106: 21.79, 107: 21.86, 108: 21.92, 109: 21.99, 110: 22.06, 111: 22.13, 112: 22.2, 113: 22.26, 114: 22.33, 115: 22.4, 116: 22.47, 117: 22.53, 118: 22.6, 119: 22.67, 120: 22.74, 121: 22.8, 122: 22.87, 123: 22.94, 124: 23.01, 125: 23.07, 126: 23.14, 127: 23.21, 128: 23.28, 129: 23.34, 130: 23.41, 131: 23.48, 132: 23.55, 133: 23.61, 134: 23.68, 135: 23.75, 136: 23.82, 137: 23.89, 138: 23.95, 139: 24.02, 140: 24.09, 141: 24.16, 142: 24.22, 143: 24.3, 144: 24.37, 145: 24.44, 146: 24.52, 147: 24.59, 148: 24.66, 149: 24.74, 150: 24.81, 151: 24.89, 152: 24.96, 153: 25.03, 154: 25.11, 155: 25.18, 156: 25.25, 157: 25.33, 158: 25.4, 159: 25.48, 160: 25.55, 161: 25.62, 162: 25.7, 163: 25.77, 164: 25.84, 165: 25.92, 166: 25.99, 167: 26.07, 168: 26.14, 169: 26.21, 170: 26.29, 171: 26.36, 172: 26.44, 173: 26.51, 174: 26.58, 175: 26.66, 176: 26.73, 177: 26.8, 178: 26.88, 179: 26.95, 180: 27.03, 181: 27.1, 182: 27.17, 183: 27.25, 184: 27.32, 185: 27.39, 186: 27.47, 187: 27.54, 188: 27.62, 189: 27.69, 190: 27.76, 191: 27.84, 192: 27.91, 193: 27.98, 194: 28.06, 195: 28.13, 196: 28.21, 197: 28.28, 198: 28.34, 199: 28.41, 200: 28.48}




def total_current(path, initial_vaccines_amount=200, flight_velocity=7):  # flight_velocity in km/h
    amount_of_vaccines = initial_vaccines_amount
    list_of_vaccine_amounts = []
    list_of_current = []
    list_of_distances = []
    list_of_flight_times = []
    list_of_ah = []
    total_ah = 0

    for i in range(len(path) - 1):
        if i > 0:
            amount_of_vaccines -= vaccines_hospitals[path[i]]
        list_of_vaccine_amounts.append(amount_of_vaccines)

        distance = calculate_distance(real_coordinates[path[i]], real_coordinates[path[i+1]])
        list_of_distances.append(round(distance, 2))
        flight_time = distance / flight_velocity  
        list_of_flight_times.append(round(flight_time,2))

        current = vaccines_current.get(amount_of_vaccines, 0)
        list_of_current.append(round(current,2))

        ah = current * flight_time
        list_of_ah.append(round(ah,2))
        total_ah += ah
        total_ah = round(total_ah,2)

    total_wh = round(total_ah * 14.8)
    

    # print("Vaccine amounts:", list_of_vaccine_amounts)
    # print("List of current:", list_of_current)
    # print("List of distances:", list_of_distances)
    # print("List of flight times (hours):", list_of_flight_times)
    # print("List of Ah:", list_of_ah)
    # print(f"Total distance: {round(sum(list_of_distances))} km")

    # print(f"Total Ah: {total_ah} Ah")
    # print(f"Total Wh: {round(total_ah * 14.8, 3)} Wh")


    return total_wh

def inital_vaccines_route(route):
    total_vaccines = sum(vaccines_hospitals[loc] for loc in route if loc in vaccines_hospitals)
    return total_vaccines

l1 =  ['VUB', 'Hôpital Etterbeek-Ixelles', 'Hôpitaux iris Ziekenhuizen', 'Clinique Saint-Jean', 'VUB']
l2 =  ['VUB', 'Edith Cavell', "Cliniques de l'Europe", 'Epsylon ASBL', 'VUB']



def total_current_with_subroutes(list_of_subroutes):
    tot1_wh = 0
    
    for subroute in list_of_subroutes:
        tot1_wh += total_current(subroute, inital_vaccines_route(subroute))
    print(f"{len(list_of_subroutes)} subroutes total consumption: {tot1_wh} Wh")
    return tot1_wh


print(total_current(flight_route))